{"backend_state":"init","connection_file":"/projects/4cd1c004-aa87-4c40-b1fd-5234fe1a4654/.local/share/jupyter/runtime/kernel-3bad11a8-67d1-430a-9bca-404a3e17dc93.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"9a9d54","input":"","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"241173","input":"import pandas as pd\n#from sklearn.datasets import make_classification\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"4d5889","input":"df = pd.read_csv('../data/real_dataset.csv').sample(frac=0.5)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"03e175","input":"classifier = MLPClassifier(hidden_layer_sizes=(13, 13), max_iter=400, activation='relu', solver='adam', alpha=0.00008, learning_rate='adaptive', learning_rate_init=0.001, random_state=0)\nclassifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)\naccuracy = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \", accuracy)\nprint((y_pred)[0:500])","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy:  0.5001384849743803\n[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n"}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"0fca5e","input":"try:\n    y = pd.factorize(df['belongs'])[0]\n    df.drop(['belongs', 'playlist'], axis=1, inplace=True)\n    x_train, x_test, y_train, y_test = train_test_split(df, y, test_size=0.2)\nexcept KeyError:\n    x_train, x_test, y_train, y_test = train_test_split(df, y, test_size=0.2)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"0f1f1e","input":"pass\n'''\nfrom sklearn.model_selection import GridSearchCV\n\nmlp_gs = MLPClassifier(max_iter=100)\nparameter_space = {\n    'hidden_layer_sizes': [(13, 13)], #(24), (13), (24, 16, 10)],\n    'alpha': [0.0001, 0.001]\n}\nclf = GridSearchCV(mlp_gs, parameter_space, n_jobs=-1, cv=5)\n\nclf.fit(x_train,y_train)\nprint('Best parameters found:\\n', clf.best_params_)\n'''","output":{"0":{"data":{"text/plain":"\"\\nfrom sklearn.model_selection import GridSearchCV\\n\\nmlp_gs = MLPClassifier(max_iter=100)\\nparameter_space = {\\n    'hidden_layer_sizes': [(13, 13)], #(24), (13), (24, 16, 10)],\\n    'alpha': [0.0001, 0.001]\\n}\\nclf = GridSearchCV(mlp_gs, parameter_space, n_jobs=-1, cv=5)\\n\\nclf.fit(x_train,y_train)\\nprint('Best parameters found:\\n', clf.best_params_)\\n\""},"exec_count":5,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c5f6fd","input":"from sklearn.model_selection import cross_val_score\n\nprint(cross_val_score(classifier, x_test, y_test, cv=3, scoring='accuracy'))\nprint(cross_val_score(classifier, x_test, y_test, cv=3, scoring='f1'))\nprint(cross_val_score(classifier, x_test, y_test, cv=3, scoring='precision'))\nprint(cross_val_score(classifier, x_test, y_test, cv=3, scoring='recall'))","output":{"0":{"name":"stdout","output_type":"stream","text":"[0.5        0.50186955 0.50083091]\n"},"1":{"name":"stdout","output_type":"stream","text":"[0.38546199 0.64654162 0.6655574 ]\n"},"2":{"name":"stdout","output_type":"stream","text":"[0.49989489 0.5        0.50091647]\n"},"3":{"name":"stdout","output_type":"stream","text":"[0.98335414 1.         0.97711194]\n"}},"pos":5,"type":"cell"}
{"id":0,"time":1655998185837,"type":"user"}
{"last_load":1656079596623,"type":"file"}