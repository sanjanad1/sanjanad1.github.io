{"backend_state":"init","connection_file":"/projects/4cd1c004-aa87-4c40-b1fd-5234fe1a4654/.local/share/jupyter/runtime/kernel-2a41cbac-2d5c-4c72-9164-1ad98f0304ce.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"f6b025","input":"","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"cef73a","input":"from sklearn.svm import LinearSVC\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"8dff9a","input":"df = pd.read_csv('../data/real_dataset.csv').sample(frac=0.25)","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"79f2aa","input":"try:\n    y = pd.factorize(df['belongs'])[0]\n    df.drop(['belongs', 'playlist'], axis=1, inplace=True)\n    x_train, x_test, y_train, y_test = train_test_split(df, y, test_size=0.2)\nexcept KeyError:\n    x_train, x_test, y_train, y_test = train_test_split(df, y, test_size=0.2)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"1970b3","input":"clf = LinearSVC(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n          multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n          verbose=0)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"cc54d4","input":"# Why use linearSVC? much faster, issues with regular sklearn svc","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"e30bbb","input":"clf.fit(x_train, y_train)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearSVC(dual=False)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC(dual=False)</pre></div></div></div></div></div>","text/plain":"LinearSVC(dual=False)"},"exec_count":16,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"167748","input":"from sklearn.model_selection import cross_val_score\n\nprint(np.mean(cross_val_score(clf, x_test, y_test, cv=3, scoring='accuracy')))\nprint(np.mean(cross_val_score(clf, x_test, y_test, cv=3, scoring='f1')))\nprint(np.mean(cross_val_score(clf, x_test, y_test, cv=3, scoring='precision')))\nprint(np.mean(cross_val_score(clf, x_test, y_test, cv=3, scoring='recall')))","output":{"0":{"name":"stdout","output_type":"stream","text":"0.48982135438304947\n0.5115916226398001\n0.49119537892225534\n"},"1":{"name":"stdout","output_type":"stream","text":"0.5338865836791148\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"f9b78c","input":"from sklearn.metrics import accuracy_score\n\ny_pred = clf.predict(x_test)\n\naccuracy_score(y_test, y_pred)","output":{"0":{"data":{"text/plain":"0.5068550062318239"},"exec_count":18,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"0cefed","input":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\ncf_matrix = confusion_matrix(y_test, y_pred)\n\nprint(cf_matrix)\n\nax = sns.heatmap(cf_matrix, annot=True, cmap='Blues')\nax.set_title('SVM Confusion Matrix');\nax.set_xlabel('Predicted Values')\nax.set_ylabel('Actual Values');\ntmp = ax.get_figure()\ntmp.savefig(\"../omni/app/static/images/conf_mat_svm.png\")\n","output":{"0":{"name":"stdout","output_type":"stream","text":"[[1721 1885]\n [1676 1939]]\n"},"1":{"data":{"image/png":"4fc03726847339d644f9c4aba467361261b7b384","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":21,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"id":0,"time":1656092599434,"type":"user"}
{"last_load":1656079592854,"type":"file"}